#include "xparameters.h"
#include "xaxivdma.h"

// Define constants based on your hardware configuration
#define VDMA_DEVICE_ID XPAR_AXIVDMA_0_DEVICE_ID
#define DDR_BASE_ADDR  XPAR_DDR_MEM_BASEADDR // Update with your DDR base address
#define FRAME_HORIZONTAL_LEN 480 // Adjust to your frame size
#define FRAME_VERTICAL_LEN 480   // Adjust to your frame size
#define NUMBER_OF_FRAMES 3        // Number of frames for circular buffer

// Global variable for the VDMA instance
XAxiVdma AxiVdma;

int main()
{
    int Status;
    XAxiVdma_Config *Config;
    XAxiVdma_DmaSetup WriteCfg;

    // Lookup the VDMA configuration
    Config = XAxiVdma_LookupConfig(VDMA_DEVICE_ID);
    if (!Config) {
        xil_printf("No VDMA found\r\n");
        return XST_FAILURE;
    }

    // Initialize the VDMA
    Status = XAxiVdma_CfgInitialize(&AxiVdma, Config, Config->BaseAddress);
    if (Status != XST_SUCCESS) {
        xil_printf("VDMA Configuration Initialization failed\r\n");
        return XST_FAILURE;
    }

    // Set up the Write channel (S2MM) configuration
    WriteCfg.VertSizeInput = FRAME_VERTICAL_LEN;
    WriteCfg.HoriSizeInput = FRAME_HORIZONTAL_LEN * (Config->Mm2SStreamWidth >> 3);
    WriteCfg.Stride = FRAME_HORIZONTAL_LEN;
    WriteCfg.FrameDelay = 0;
    WriteCfg.EnableCircularBuf = 1;
    WriteCfg.EnableSync = 0;
    WriteCfg.PointNum = 0;
    WriteCfg.EnableFrameCounter = 0;
    WriteCfg.FixedFrameStoreAddr = 0;

    // Initialize buffer addresses for write channel
    for (int i = 0; i < NUMBER_OF_FRAMES; i++) {
        WriteCfg.FrameStoreStartAddr[i] = DDR_BASE_ADDR + (i * FRAME_HORIZONTAL_LEN * FRAME_VERTICAL_LEN);
    }

    // Configure the write channel
    Status = XAxiVdma_DmaConfig(&AxiVdma, XAXIVDMA_WRITE, &WriteCfg);
    if (Status != XST_SUCCESS) {
        xil_printf("Write channel configuration failed\r\n");
        return XST_FAILURE;
    }

    // Set buffer addresses for write channel
    Status = XAxiVdma_DmaSetBufferAddr(&AxiVdma, XAXIVDMA_WRITE, WriteCfg.FrameStoreStartAddr);
    if (Status != XST_SUCCESS) {
        xil_printf("Write channel set buffer address failed\r\n");
        return XST_FAILURE;
    }

    // Start the write channel
    Status = XAxiVdma_DmaStart(&AxiVdma, XAXIVDMA_WRITE);
    if (Status != XST_SUCCESS) {
        xil_printf("Start write transfer failed\r\n");
        return XST_FAILURE;
    }

    xil_printf("VDMA write channel started\r\n");

    while(1); // Loop here to let the VDMA continue running

    return XST_SUCCESS;
}
